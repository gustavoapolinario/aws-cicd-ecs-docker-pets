Description: >
  AWS CI/CD Pipeline example


Parameters:

  EnvironmentName:
    Description: Environment name. Used to docker label
    Type: String
    Default: dev

  PipelineArtifactsBucketName:
    Description: Name of the Bucket whos will store pipeline artefacts
    Type: String
    Default: pipeline-name

  BuildCacheBucketName:
    Description: Name of the Bucket whos will store pipeline artefacts
    Type: String
    Default: pipeline-name2

Resources:
  PipelineArtifactsBucket:
    #DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PipelineArtifactsBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
          - Id: 7daysExpiration
            Status: Enabled
            ExpirationInDays: 7

  CacheBucket:
    #DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BuildCacheBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
          - Id: 7daysExpiration
            Status: Enabled
            ExpirationInDays: 7

  BuildLogs:
    Type: "AWS::Logs::LogGroup"
    #DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-build
      RetentionInDays: 90

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess


  CodeBuildRolePolicies: 
    Type: "AWS::IAM::Policy"
    DependsOn: CodeBuildRole
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-CodeBuildRole-policy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: '*'
          - 
            Effect: "Allow"
            Action: 
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:List*
              - s3:DeleteObject
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Resource:
              - !GetAtt PipelineArtifactsBucket.Arn
              - !Sub ${PipelineArtifactsBucket.Arn}/*
          - 
            Effect: "Allow"
            Action: 
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:CompleteLayerUpload
              - ecr:GetAuthorizationToken
              - ecr:InitiateLayerUpload
              - ecr:PutImage
              - ecr:UploadLayerPart
            Resource:
              - !GetAtt DockerRegistry.Arn
      Roles: 
        - Ref: "CodeBuildRole"

  DockerRegistry:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: docker-pets

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: True
        ImagePullCredentialsType: CODEBUILD
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          -
            Type: PLAINTEXT
            Name: ambiente
            Value: !Ref EnvironmentName
          -
            Type: PLAINTEXT
            Name: account_id
            Value: !Ref "AWS::AccountId"
        Type: LINUX_CONTAINER
      Name: !Ref 'AWS::StackName'
      ServiceRole: !Ref CodeBuildRole
      Cache:
        Location: !Ref CacheBucket
        Type: S3
      Source:
        Type: GITHUB
        Location: https://github.com/gustavoapolinario/aws-cicd-ecs-docker-pets.git
        GitCloneDepth: 1
      QueuedTimeoutInMinutes: 30
      LogsConfig:
        CloudWatchLogs: 
          Status: ENABLED
          GroupName: !Ref BuildLogs
